[{"content":"非常感谢每一个赞助者，不管赞助多少，都让我一点点明白我的创造与分享真的有用，也更加给予了我坚持的动力。\n也可以加入我的星球，会随时更新最新的随笔和行业信息。这里更多的会发一些敏感内容和长篇文章。\n如果遇到了什么问题，可以随时联系我，我很乐意和每一位朋友的沟通。\n微信扫码\n微信扫码\n","permalink":"https://gby.ai/sponsor/","summary":"非常感谢每一个赞助者，不管赞助多少，都让我一点点明白我的创造与分享真的有用，也更加给予了我坚持的动力。\n也可以加入我的星球，会随时更新最新的随笔和行业信息。这里更多的会发一些敏感内容和长篇文章。\n如果遇到了什么问题，可以随时联系我，我很乐意和每一位朋友的沟通。\n微信扫码\n微信扫码","title":"赞助"},{"content":"相关工具 Obsidian + Github Publisher 插件 Hugo + Paper Mod 主题，你也可以选择其它，例如：Hexo Github Vercel 具体步骤继续往下看。\nHugo + PaperMod 使用 hugo 初始化一个网站，并配置好你喜欢的主题，并发布到 Github 上，这块具体怎么弄就不展开介绍了。\n可以参考：\n官方主题文档：PaperMod 我的仓库：miaogaolin/workspace-obsidian-publisher 稍微改了点官方主题 Github Publisher 给 Obsidian 安装 Github Publisher 插件，该插件的作用是将 Obsidian 中的文章上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\n我会根据使用过程，讲一讲我用到的配置，如果你对其它配置感兴趣，可以看看 官网文档。\nGithub config 注意：生成的 token 不要放在 Github 的公共仓库，检测到 token 就会失效。\nUpload config Fixed Folder，表示将所有的文章上传到 content/posts 目录下。 Property key，可以通过文章的属性设置上传的目录，例如我这配置：\n通过 dir 属性获取上传的目录，最终的上传路径为 content/{dir} 如果 dir 属性没有设置则默认上传到 content/posts 目录下 Text \u0026amp; link converters 这块配置影响上传文章后的内容结构。\n注意：Markdown hard line break 最好关闭，我这边开启造成了空行变多，使代码难看、表格无法渲染。\n下来稍微麻烦点展开说说，正则内容替换：\n截图中有三个正则替换规则，每行后面都有个箭头，↑箭头表示插件应用之前替换，↓箭头表示插件应用之后替换。\n正则内容：\n第一行：图片路径，/(\\(|\\[)([0-9a-z]+)\\.(png|jpg|webp)/ -\u0026gt; $1/images/$2.$3 ，将数字字母组合的图片名之前加上 /images 地址前缀，我图片在本地存储的，而且图片名称自动会存储为纯字母数字的格式，如果你有图床那这个就不需要这个配置。 第二行：文章之前引用，/[^\\(]+\\.md/ -\u0026gt; {{\u0026lt; relref \u0026quot;$\u0026amp;\u0026quot; \u0026gt;*/}}，将 obsidian 文章之间的引用转化为 hugo 中的格式，在 obsidian 文章之间引用是没有 md 后缀的，因此执行该替换的时间是等文章使用插件转化后再执行，据此后面的箭头向下。 第三行：文章封面，/cover\\.image/ -\u0026gt; cover:\\n image, 将一级 key 转为二级，因为 obsidian 不支持多层级属性。 {{\u0026lt;/* relref \u0026quot;例子.md\u0026quot; \u0026gt;}} 这个在 hugo 中表示获取“例子.md”文件的相对访问地址，例如：例子.md 文件的 frontmatter 的 slug 配置为 example-1，那生成的结果大概就是 /post/example-1，不配置 slug 那访问地址就是 /post/例子\nAttachment \u0026amp; embed note config 会将图片中使用到的本地图片上传到 static/images 仓库目录下。\n优化内容的相关插件 这些 Obsidian 插件对于发布网站不是必要的，但是对于优化内容格式还是很有必要的：\nObsidian Linter 插件,我只用了在英文两边加空格的设置。 Image Converter 转化图片格式，我统一转为 webp，并设置了图片分辨率大小。 Unique attachments 用于将附件的文件名统一为 “字母 + 数字”的格式。 Image Inserter 用于找图片，我用于设置文章封面，即设置 cover:\nimage 属性。 Obsidian 文章模板 我完整说说我在 obsidian 模板里配置的内容，用于发布文章时统一的设置。\n我的配置是和 Hugo 强关联的，如果你用了其它工具，就根据自己的情况调整。\n--- date: \u0026#34;{{date}}\u0026#34; # 创建时间，我这边生成的格式是 YYYY-MM-DDTHH:mm:ssZ tags: - 标签1 - 标签2 title: \u0026#34;{{title}}\u0026#34; slug: \u0026#34;{{time}}\u0026#34; # 自定义 URL 中文章的访问名称，默认用时间戳填充模板格式为X share: false # 配合 Github Publisher插件用的,true表示 obsidian 的文章可以发布 canonicalURL: \u0026#34;\u0026#34; # 之前文章在其他地方被发布的地址，避免搜索引擎重复，设置了该属性会优先展示 canonicalURL 执行的文章 keywords: # 用于 SEO 优化，也可以不配置该内容默认会使用 tags 的内容 - 关键字1 - 关键字2 description: \u0026#34;\u0026#34; # 文章的描述 SEO 优化，为空时默认会截取文章前面的内容 series: \u0026#34;系列\u0026#34; # 系列文章 lastmod: # 文章最后更新的时间 lang: \u0026#34;cn\u0026#34; # 默认不用写，配置文件会设置默认 cn 中文，en 英文等等 cover.image: \u0026#34;\u0026#34; # 文章封面图片地址 author: # 作者名称 --- 发布 Obsidian 命令 当然插件的配置也支持菜单模式，配置前往：Plugin settings -\u0026gt; Menu。\n先使用命令行发布，输入 active，然后选择 Github Publisher 即可，记着文章的 share 属性要开启，即 true。\n右下角会提示上传的进度，如果完成了右上角有提示：\n如果你想上传多个 share 为 true 的文章，使用的命令为：\nRefresh published and upload new notes 将所有 share 为 true 且新更新的文章发布 Refresh all published notes 将所有 share 为 true 的文章都发布 Vercel 部署 接下来访问 vercel 官网，然后将上面对应的仓库部署上去即可，不用关心我下面的仓库名称。\n1. Github 使用 Github 登录\n2. 创建项目 3. Import \u0026amp; Deploy 导入 Github 上 fork 后的项目，import 后再点击 deploy，下来需要耐心等会。\n4. 域名 完成后点击 Go to Dashboard \u0026gt; View Domains，再添加自己的域名。\n添加完后，再解析自己的域名，我的域名在阿里云购买的，先复制上图中蓝色框的内容，这个是在 Vercel 站上给你分配的域名。这个域名访问时不方便，所以用自己的。\n图解：\n记录类型：CNAME 记录值：填写自己的 总结 重点学会了 Github Publisher 插件后，你可以用 Hexo 等其它工具管理你的内容，只要把你 Obsidian 对应的内容放置到仓库对应的地方即可。\nVercel 也不是必须的，你也可以使用 Github Page，只是我个人习惯而已。\n","permalink":"https://gby.ai/obsidian-blog/","summary":"相关工具 Obsidian + Github Publisher 插件 Hugo + Paper Mod 主题，你也可以选择其它，例如：Hexo Github Vercel 具体步骤继续往下看。\nHugo + PaperMod 使用 hugo 初始化一个网站，并配置好你喜欢的主题，并发布到 Github 上，这块具体怎么弄就不展开介绍了。\n可以参考：\n官方主题文档：PaperMod 我的仓库：miaogaolin/workspace-obsidian-publisher 稍微改了点官方主题 Github Publisher 给 Obsidian 安装 Github Publisher 插件，该插件的作用是将 Obsidian 中的文章上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\n我会根据使用过程，讲一讲我用到的配置，如果你对其它配置感兴趣，可以看看 官网文档。\nGithub config 注意：生成的 token 不要放在 Github 的公共仓库，检测到 token 就会失效。\nUpload config Fixed Folder，表示将所有的文章上传到 content/posts 目录下。 Property key，可以通过文章的属性设置上传的目录，例如我这配置：\n通过 dir 属性获取上传的目录，最终的上传路径为 content/{dir} 如果 dir 属性没有设置则默认上传到 content/posts 目录下 Text \u0026amp; link converters 这块配置影响上传文章后的内容结构。","title":"使用 Obsidian 免费建个人博客"},{"content":" 有两种方法，一种是 下载字体 并上传到自己的项目中引用，一种是使用现成的 CDN 引用，我直接选择了 CDN 方式。\n下来替换主题的默认模板和样式，进入 Hugo 内容管理的仓库根目录：\n新建模板 layouts/partials/extend_head.html，设置内容： \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.7.0/style.css\u0026#34; media=\u0026#34;print\u0026#34; onload=\u0026#34;this.media=\u0026#39;all\u0026#39;\u0026#34;\u0026gt; 这是七牛云的 CDN，更多的引用方式可以看看这个项目：chawyehsu/lxgw-wenkai-webfont\n全局引用字体，新建 assets/css/extended/fonts.css，设置内容： body, .post-content code { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, \u0026#34;Roboto\u0026#34;, \u0026#34;PingFang SC\u0026#34;, \u0026#34;Microsoft Yahei\u0026#34;, sans-serif; } 设置完成，不过再扩展下里面涉及到的知识点：\n异步加载 CSS，设置 link 标签属性 media=\u0026quot;print\u0026quot; 在打印的时候加载该引用 onload=\u0026quot;this.media='all'\u0026quot; 等页面加载完后在将 media 设置回去，即默认，这就会开始应用该 css media 属性的详细用法请看：media types 在该 cdn 引用的 css 文件中，会有这么一个设置： @font-face { font-display: swap; } font-display 表示加载 font-family 后面字体的规则：\nswap 如果想使用的字体没有，则直接使用备用字体，等字体下载完成再交换渲染 auto 这是默认，一般会先文本空白等字体下载\n更多解释，可以参考下这篇： Web 性能优化：使用 CSS font-display 控制字体加载和替换 ","permalink":"https://gby.ai/lxgw-font/","summary":"有两种方法，一种是 下载字体 并上传到自己的项目中引用，一种是使用现成的 CDN 引用，我直接选择了 CDN 方式。\n下来替换主题的默认模板和样式，进入 Hugo 内容管理的仓库根目录：\n新建模板 layouts/partials/extend_head.html，设置内容： \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.7.0/style.css\u0026#34; media=\u0026#34;print\u0026#34; onload=\u0026#34;this.media=\u0026#39;all\u0026#39;\u0026#34;\u0026gt; 这是七牛云的 CDN，更多的引用方式可以看看这个项目：chawyehsu/lxgw-wenkai-webfont\n全局引用字体，新建 assets/css/extended/fonts.css，设置内容： body, .post-content code { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, \u0026#34;Roboto\u0026#34;, \u0026#34;PingFang SC\u0026#34;, \u0026#34;Microsoft Yahei\u0026#34;, sans-serif; } 设置完成，不过再扩展下里面涉及到的知识点：\n异步加载 CSS，设置 link 标签属性 media=\u0026quot;print\u0026quot; 在打印的时候加载该引用 onload=\u0026quot;this.media='all'\u0026quot; 等页面加载完后在将 media 设置回去，即默认，这就会开始应用该 css media 属性的详细用法请看：media types 在该 cdn 引用的 css 文件中，会有这么一个设置： @font-face { font-display: swap; } font-display 表示加载 font-family 后面字体的规则：\nswap 如果想使用的字体没有，则直接使用备用字体，等字体下载完成再交换渲染 auto 这是默认，一般会先文本空白等字体下载","title":"PaperMod 主题引用“霞鹜文楷”字体"},{"content":" 博客的死掉不是停止更新，而是无法访问 —— Randy Lu\n因为这句话，让我重新认识写博客的态度，为的不是马不停蹄，而是 “我一直在”。\n本人从事过8年的Golang、PHP高级研发工程师，leader小团队。\n在ChatGPT发布之后有感下一波浪潮即将到来，随即转为AI产品经理。目前负责公司的AI智能客服项目从0到1落地，目前取得不错的成果，已经商业化。\n每时每刻都在感受 AI 带给生活的变化，一直在学习中，未来也会 All in AI，欢迎交流👏🏻\n联系我 Email: hellloveyy@gmail.com 微信: 微信扫码\n","permalink":"https://gby.ai/about/","summary":"博客的死掉不是停止更新，而是无法访问 —— Randy Lu\n因为这句话，让我重新认识写博客的态度，为的不是马不停蹄，而是 “我一直在”。\n本人从事过8年的Golang、PHP高级研发工程师，leader小团队。\n在ChatGPT发布之后有感下一波浪潮即将到来，随即转为AI产品经理。目前负责公司的AI智能客服项目从0到1落地，目前取得不错的成果，已经商业化。\n每时每刻都在感受 AI 带给生活的变化，一直在学习中，未来也会 All in AI，欢迎交流👏🏻\n联系我 Email: hellloveyy@gmail.com 微信: 微信扫码","title":"关于我"}]
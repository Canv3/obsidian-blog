<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on PrintLove</title>
    <link>https://www.gby.ai/posts/</link>
    <description>Recent content in Posts on PrintLove</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Content under license [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</copyright>
    <lastBuildDate>Thu, 21 Dec 2023 10:06:19 +0800</lastBuildDate><atom:link href="https://www.gby.ai/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Obsidian 免费建个人博客</title>
      <link>https://www.gby.ai/obsidian-blog/</link>
      <pubDate>Thu, 21 Dec 2023 10:06:19 +0800</pubDate>
      
      <guid>https://www.gby.ai/obsidian-blog/</guid>
      <description>相关工具 Obsidian + Github Publisher 插件 Hugo + Paper Mod 主题，你也可以选择其它，例如：Hexo Github Vercel 具体步骤继续往下看。
Hugo + PaperMod 使用 hugo 初始化一个网站，并配置好你喜欢的主题，并发布到 Github 上，这块具体怎么弄就不展开介绍了。
可以参考：
官方主题文档：PaperMod 我的仓库：miaogaolin/workspace-obsidian-publisher 稍微改了点官方主题 Github Publisher 给 Obsidian 安装 Github Publisher 插件，该插件的作用是将 Obsidian 中的文章上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。
我会根据使用过程，讲一讲我用到的配置，如果你对其它配置感兴趣，可以看看 官网文档。
Github config 注意：生成的 token 不要放在 Github 的公共仓库，检测到 token 就会失效。
Upload config Fixed Folder，表示将所有的文章上传到 content/posts 目录下。 Property key，可以通过文章的属性设置上传的目录，例如我这配置：
通过 dir 属性获取上传的目录，最终的上传路径为 content/{dir} 如果 dir 属性没有设置则默认上传到 content/posts 目录下 Text &amp;amp; link converters 这块配置影响上传文章后的内容结构。</description>
    </item>
    
    <item>
      <title>PaperMod 主题引用“霞鹜文楷”字体</title>
      <link>https://www.gby.ai/lxgw-font/</link>
      <pubDate>Wed, 20 Dec 2023 15:39:56 +0800</pubDate>
      
      <guid>https://www.gby.ai/lxgw-font/</guid>
      <description>有两种方法，一种是 下载字体 并上传到自己的项目中引用，一种是使用现成的 CDN 引用，我直接选择了 CDN 方式。
下来替换主题的默认模板和样式，进入 Hugo 内容管理的仓库根目录：
新建模板 layouts/partials/extend_head.html，设置内容： &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.7.0/style.css&amp;#34; media=&amp;#34;print&amp;#34; onload=&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34;&amp;gt; 这是七牛云的 CDN，更多的引用方式可以看看这个项目：chawyehsu/lxgw-wenkai-webfont
全局引用字体，新建 assets/css/extended/fonts.css，设置内容： body, .post-content code { font-family: &amp;#34;LXGW WenKai Screen&amp;#34;, &amp;#34;Roboto&amp;#34;, &amp;#34;PingFang SC&amp;#34;, &amp;#34;Microsoft Yahei&amp;#34;, sans-serif; } 设置完成，不过再扩展下里面涉及到的知识点：
异步加载 CSS，设置 link 标签属性 media=&amp;quot;print&amp;quot; 在打印的时候加载该引用 onload=&amp;quot;this.media=&#39;all&#39;&amp;quot; 等页面加载完后在将 media 设置回去，即默认，这就会开始应用该 css media 属性的详细用法请看：media types 在该 cdn 引用的 css 文件中，会有这么一个设置： @font-face { font-display: swap; } font-display 表示加载 font-family 后面字体的规则：
swap 如果想使用的字体没有，则直接使用备用字体，等字体下载完成再交换渲染 auto 这是默认，一般会先文本空白等字体下载</description>
    </item>
    
  </channel>
</rss>
